version: "3.8"

services:
  db:
    container_name: mfms-db
    image: postgres:16
    environment:
      POSTGRES_DB: mfms
      POSTGRES_USER: mfms
      POSTGRES_PASSWORD: mfms
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U mfms -d mfms"]
      interval: 5s
      timeout: 3s
      retries: 10
    volumes:
      - ./pgdata:/var/lib/postgresql/data
      - ./db-init.sql:/docker-entrypoint-initdb.d/db-init.sql
    ports: ["5432:5432"] # only if you also want host access

  mfms:
    container_name: mfms-service
    build:
      context: .
      dockerfile: Dockerfile
    depends_on:
      db:
        condition: service_healthy
      otel-collector:
        condition: service_started
    environment:
      JAVA_TOOL_OPTIONS: >-
        -javaagent:/otel-agent/opentelemetry-javaagent.jar
        -Dotel.instrumentation.logback-appender.enabled=true
      OTEL_EXPORTER_OTLP_ENDPOINT: http://otel-collector:4318
      OTEL_EXPORTER_OTLP_PROTOCOL: http/protobuf
      OTEL_TRACES_EXPORTER: otlp
      OTEL_METRICS_EXPORTER: otlp
      OTEL_LOGS_EXPORTER: otlp
      SPRING_APPLICATION_NAME: mfms
      APP_ENV: local

    # ðŸ‘‡ mount the agent jar into the container (read-only)
    volumes:
      - ./observability/otel/opentelemetry-javaagent.jar:/otel-agent/opentelemetry-javaagent.jar:ro

    ports:
      - "8080:8080"
    restart: "no"

  # ===== OpenTelemetry Collector =====
  otel-collector:
    container_name: otel-collector
    image: otel/opentelemetry-collector-contrib:latest
    command: [ "--config=/etc/otel/config.yml" ]
    volumes:
      - ./observability/otel/config.yml:/etc/otel/config.yml
    ports:
      - "4317:4317"
      - "4318:4318"
      - "8889:8889"
      - "8888:8888"
    depends_on:
      - tempo
      - loki

  # ===== Tempo (Traces) =====
  tempo:
    container_name: tempo
    image: grafana/tempo:latest
    command: [ "-config.file=/etc/tempo/tempo.yml" ]   # <- match .yaml or .yml
    volumes:
      - ./observability/tempo/tempo.yml:/etc/tempo/tempo.yml:ro
    ports:
      - "3200:3200"  # external UI/HTTP API (no need to publish 4317/4318 to host)

  # ===== Prometheus (Metrics) =====
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.retention.time=15d"
    volumes:
      - ./observability/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    ports:
      - "9090:9090"
    depends_on:
      - otel-collector

  # ===== Loki (Logs) =====
  loki:
    image: grafana/loki:latest
    container_name: loki
    command: ["-config.file=/etc/loki/loki-config.yml"]
    volumes:
      - ./observability/loki/loki-config.yml:/etc/loki/loki-config.yml:ro
      - loki-data:/loki
    ports:
      - "3100:3100"

  # ===== Grafana (Dashboards) =====
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: admin
    volumes:
      - grafana-data:/var/lib/grafana
      - ./observability/grafana/datasources:/etc/grafana/provisioning/datasources:ro

    ports:
      - "3000:3000"
    depends_on:
      - prometheus
      - tempo
      - loki

  # ===== (Your) Vault (left as-is) =====
  vault:
    image: hashicorp/vault:1.17
    container_name: mfms-vault
    environment:
      VAULT_DEV_ROOT_TOKEN_ID: root
      VAULT_DEV_LISTEN_ADDRESS: 0.0.0.0:8200
    ports:
      - "8200:8200"
    cap_add:
      - IPC_LOCK
    command: ["server", "-dev", "-dev-root-token-id=root", "-dev-listen-address=0.0.0.0:8200"]

volumes:
  grafana-data:
  prometheus-data:
  loki-data:
  tempo-data:
  pgdata:
